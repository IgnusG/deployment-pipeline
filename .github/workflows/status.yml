name: Update Deployment Status

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    steps:
      - name: Update all deployments
        uses: actions/github-script@v3
        env:
          chrome_public: ${{ secrets.CHROME_PUBLIC }}
          chrome_preview: 'CHROME_PREVIEW'
          firefox_public: ${{ secrets.FIREFOX_PUBLIC }}
          chrome_client_id: 'CHROME_CLIENT_ID'
          chrome_client_secret: 'CHROME_CLIENT_SECRET'
          chrome_refresh_token: 'CHROME_REFRESH_TOKEN'
        with:
          script: |
            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.repository }}'.split('/')[1];

            const tagsList = github.repos.list

            const { data: deployments } = await github.repos.listDeployments({
              owner,
              repo
            });

            const statuses = await Promise.all(
              deployments.map(async (deployment) => {
                const { data: status } = await github.repos.listDeploymentStatuses({
                  owner,
                  repo,
                  deployment_id: deployment.id
                });

                return [deployment, status];
              })
            );

            await Promise.all(
              statuses.map(async ([deployment, status]) => {
                const [lastStatus] = status.reverse();

                if (lastStatus.state === 'pending') {
                  const [version] = deployment.ref.split('/').reverse();
                  const environment = deployment.environment.toLowerCase().replace(' ','');

                  const check = require(`${process.env.GITHUB_WORKSPACE}/.github/pipeline/check.js`);

                  github.repos.createDeploymentStatus({
                    owner,
                    repo,
                    deployment_id: deployment.id,
                    state: await check(version, environment)
                  });
                }
              })
            );
